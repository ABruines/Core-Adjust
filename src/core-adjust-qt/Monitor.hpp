/*
 * This file is part of 'Core Adjust'.
 *
 * Core Adjust - Adjust various settings of Intel Processors.
 * Copyright (C) 2020, Alexander Bruines <alexander.bruines@gmail.com>
 *
 * Core Adjust is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Core Adjust is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Core Adjust. If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * @file src/core-adjust-qt/Monitor.hpp
 * @brief A widget that display various CPU sensors.
 * @file src/core-adjust-qt/Monitor.cpp
 * @brief A widget that display various CPU sensors (implementation).
 */
#ifndef CoreAdjust_MonitorWidget
#define CoreAdjust_MonitorWidget

#include <QLabel>
#include <QGridLayout>
#include "CpuSensors.hpp"
#include "Gauge.hpp"
#include "TabMemberBase.hpp"

/** @brief A widget that displays the data generated by an instance of xxx::CpuSensors. */
class Monitor : public QWidget {
  Q_OBJECT
  class CpuActivity;
  class CpuTemperature;
  class CpuPower;
  class CpuFrequency;
  friend class MonitorTab;
  private:
    xxx::CpuSensors sensors_;
    CpuActivity* cpu_activity_;
    CpuTemperature* cpu_temp_;
    CpuPower* cpu_power_;
    CpuFrequency* cpu_frequency_;
  private slots:
    void timerCallback(void);
  public:
    explicit Monitor(QWidget* parent = nullptr);
    virtual ~Monitor() = default;
};

/** @brief A TabMemberWidget that displays the data generated by an instance of xxx::CpuActivity. */
class MonitorTab : public TabMemberWidget {
  /* This class uses the CpuSensors instance from a Monitor widget... */
  Q_OBJECT
  public:
    void load() override {}
    void store() override {}
    void refresh() override {}
    bool read(std::ostringstream&) override { return true; }
    bool apply() override { return true; }
    bool compare() override { return true; }
    void timed(bool) override;

    explicit MonitorTab(QWidget* parent = nullptr);
    ~MonitorTab() override = default;

    void setMonitor(Monitor* m);

  private:
    QVBoxLayout* layout_;
    QGridLayout* grid_ { nullptr };
    Monitor* monitor_ { nullptr };
    std::vector<Gauge*> gauges_;
    std::vector<unsigned int> previous_values_;
};

/** @brief A widget that displays the data generated by an instance of xxx::CpuActivity. */
class Monitor::CpuActivity : public QWidget {
  Q_OBJECT
  private:
    Gauge* gauge_;
    unsigned int previous_value_;
  public:
    explicit CpuActivity(QWidget* parent = nullptr);
    virtual ~CpuActivity() = default;
    void refresh(const xxx::CpuActivity&);
};

/** @brief A widget that displays the data generated by an instance of xxx::CpuTemperature. */
class Monitor::CpuTemperature : public QWidget {
  Q_OBJECT
  private:
    std::vector<QLabel*> v_;
  public:
    explicit CpuTemperature(const xxx::CpuTemperature&, QWidget* parent = nullptr);
    virtual ~CpuTemperature() = default;
    void refresh(const xxx::CpuTemperature&);
};

/** @brief A widget that displays the data generated by an instance of xxx::PowerCap::IntelRAPL. */
class Monitor::CpuPower : public QWidget {
  Q_OBJECT
  private:
    /** @brief A widget that displays the data generated by an instance of xxx::PowerCap::PowerZone. */
    struct Entry {
      QLabel* value;
      std::vector<QLabel*> sub_zones;
    };
    std::vector<Entry> v_;
  public:
    explicit CpuPower(const xxx::PowerCap::IntelRAPL&, QWidget* parent = nullptr);
    virtual ~CpuPower() = default;
    void refresh(const xxx::PowerCap::IntelRAPL&);
};

/** @brief A widget that displays the data generated by an instance of xxx::CpuFrequency and xxx::CpuActivity. */
class Monitor::CpuFrequency : public QWidget {
  Q_OBJECT
  private:
    std::vector<QLabel*> vfreq_;
    std::vector<QLabel*> vload_;
  public:
    explicit CpuFrequency(const xxx::CpuFrequency&, QWidget* parent = nullptr);
    virtual ~CpuFrequency() = default;
    void refresh(const xxx::CpuFrequency&, const xxx::CpuActivity&);
};

#endif

